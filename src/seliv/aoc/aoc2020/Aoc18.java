package seliv.aoc.aoc2020;

import java.util.List;
import java.util.Map;

public class Aoc18 {
    public static void main(String[] args) {
        List<List<String>> in = InputParser.parseInput(IN3);
        List<String> ops = in.get(0);

        long res = 0;
        for (String expr : ops) {
            s = expr.replaceAll(" ", "");
            i = 0;
            final long eval = eval();
            System.out.println("eval = " + eval);
            res += eval;
        }
        System.out.println("res = " + res);
    }

    public static String s;
    public static int i;

    public static long eval() {
        long left = term();
        while (i < s.length()) {
            char c = s.charAt(i);
            if (c != '*') {
//                throw new IllegalStateException("Must be + or *");
                break;
            }
            i++;

            long right = term();
            if (c == '*') {
                left *= right;
            } else {
                throw new IllegalStateException("Don't know how to do " + c);
            }
        }

//        System.out.println("res = " + left);
        return left;
    }

    public static long term() {
        long left = factor();
        while (i < s.length()) {
            char c = s.charAt(i);
            if (c != '+') {
//                throw new IllegalStateException("Must be + or *");
                break;
            }
            i++;

            long right = term();
            if (c == '+') {
                left += right;
            } else {
                throw new IllegalStateException("Don't know how to do " + c);
            }
        }

//        System.out.println("res = " + left);
        return left;
    }

    public static long factor() {
        char c = s.charAt(i);
        long res;
        if (c == '(') {
            i++;
            res = eval();
            if (s.charAt(i) != ')') {
                throw new IllegalStateException("no )");
            } else {
                i++;
                return res;
            }
        } else {
            i++;
            return Long.valueOf("" + c);
        }
    }

    public static String IN = "2 * 3 + (4 * 5)\n" +
            "5 + (8 * 3 + 9 + 3 * 4 * 3)\n" +
            "5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))\n" +
            "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";

    public static String IN2 = "";

    public static String IN3 = "((8 + 6 + 4 + 9 * 2 + 9) * 8 + 2 * (7 + 2 + 4 * 2 + 4) * 2 * 5) * 3\n" +
            "3 * 8 * 2 + 9 * ((6 + 5 * 3) * 7 * 9 * 7 * 7) * (7 * 4 + 5 + 8 * 8)\n" +
            "9 + (5 * 5 + 2 + (5 * 2 + 6 * 9 * 3 + 6) * 4) + 3 * 5\n" +
            "6 + (8 * 5 * 3 + 9 + 3 * 4) + 9 + 3 * 3\n" +
            "(8 + 8 * 4 + 3 + 6) + (4 + 3 * 7 + 7 + 4 + 2) + 7 + (3 + (2 * 8 + 7 + 7) * 7 + 5 * (3 * 2 + 9 + 2 + 8 + 7) * (4 + 2 + 8))\n" +
            "7 + 6 + (9 * 8 * 7 * 3) + (4 + 5 * (2 * 8 * 2 * 5 + 4) + (2 + 8 + 4 * 3 + 3) * (6 * 6 * 7 + 4 * 2 * 7)) * 6 + 9\n" +
            "9 + 7 * ((8 * 3 * 4 * 4 + 8) + 2 * 8 + 6 * 4)\n" +
            "(4 + 6 + (4 * 4 + 2 * 7 + 3) * 7) * 6 * (8 + (7 * 7) + 3)\n" +
            "(8 + 5 * (4 * 5 + 9) * (3 + 3 + 9 * 6) * 8 + 8) * 9\n" +
            "5 * 4 * 8 * (4 * 2 + 2 * 3 + 6 + (3 * 6 * 9 * 9 * 8)) + 4\n" +
            "2 + 4 + ((2 * 3 * 4 * 7 * 3) + 5) + 4\n" +
            "(6 * 9 + 2 * 9) + 4\n" +
            "3 + 9 + 2 + (8 + 2 * 8 * 4 * 9) + 2 * 6\n" +
            "9 + (3 + 6 + (3 * 6 * 5 * 2 + 5)) * (9 * 7 * 4 * 6 * 2) + 4 + (7 + 7 + 8 + 5 * 8) * (4 * (3 * 5 + 2))\n" +
            "(8 * (7 + 4) + 8) * 6\n" +
            "(8 * 3 + (4 * 8 + 9 + 6) * 2) * 4 * (5 * 2 * (9 + 8 * 3 * 2 * 7 + 2) + 3)\n" +
            "(3 + 9 + 2) * 2 + 9 + 4 * 8 * 5\n" +
            "9 + (2 + 7 * 7 * (4 * 3 * 6) * 2) + 6\n" +
            "((6 * 3) + (9 * 9 + 5 + 2) + 4 + 9 + 8 * (8 * 3 + 5 * 7 + 5)) * 4 * 2 * 4 + 3 * 2\n" +
            "9 * 4 + 9 * (4 * 9 + 7) + 2\n" +
            "(3 + 6 + 4) + 4 + 8 + 9 * (6 + 4 * (2 + 6 + 6)) * 6\n" +
            "(5 + 8 * 9 * (7 + 3 + 4 + 2) * 3 + (3 + 4 + 7 + 9)) * 4 + (7 + 6) * 3 + 3\n" +
            "7 * 3 + 8 + 3 * (2 + 2) + ((7 * 2) * 5)\n" +
            "5 * 5 * 7 * (3 * 6 + 9 + 7)\n" +
            "7 * 7 + 4\n" +
            "4 + 9 * (8 + 6) * 2\n" +
            "(8 * 3 * 8 + 3 + 4 + 5) * 4 * 5 * 6 + (2 + 5 * 4 + 6 * 3)\n" +
            "((2 + 4 * 9 + 4 * 9 * 7) + (9 * 5)) + 2 + 7 * (2 * 6) + (4 + 3)\n" +
            "5 * 5 + (2 * 9 * (4 * 2 + 4 + 9) * (5 * 4) * 2 * 4)\n" +
            "(8 + 2 * 3 + 7 * (6 + 9) * 6) + 5 + (4 * 2 * 3 + 8 + 5) + 8 * 6 * 6\n" +
            "6 + (7 * (8 + 7 + 2 * 2) * 8 * 5 * 7 + 3) + (9 + 9) + (6 + 8)\n" +
            "9 + ((5 + 8) * (5 + 5 + 8) + 7)\n" +
            "2 * 7 + (7 + 4 * (9 + 2 * 5 * 2)) + (9 + (7 + 9) * 6 + 8) * 7 + 4\n" +
            "4 * 3 * 9 * 8 * (6 + 8 * 3 * 2 + 7 + 6) * 4\n" +
            "(9 + 6 + 8) * 8 * 5 + ((5 + 4 * 5 * 5) * 6 + 3 + 6 * 6 * 4)\n" +
            "((3 + 7 * 7 * 3) * 9 * (9 * 6 + 7 + 6 * 8 + 3) + 7) + 4 + 3 + 2 + 7\n" +
            "5 + 8 * ((4 + 6 + 8 * 9 * 3 + 9) + (4 * 7 + 5 * 3 * 3) + 9) * 2 * 9\n" +
            "2 * (8 * 5 * 2 * 5) * 6 + (4 * (9 * 3 + 9) * 4 * 6)\n" +
            "4 * 6 + 4 + (5 * 6 + (9 * 3 + 2 + 3 + 6) + 3 + 9 + 7)\n" +
            "(5 + 3 + 7 + 7 + 7) + 7 * 3 + 2 * 4\n" +
            "(3 * 2 * 9) + (4 * 8 * 9)\n" +
            "7 + 4 * 6 * (7 + 6 * 3 + (9 * 7 * 6 + 8 * 6 + 2) * 3 + 9)\n" +
            "8 + 6 + (3 + 7) * (4 * 8 * 2) + 8\n" +
            "6 + (3 * 7 + 4) * 8 + 3 + (3 + 6 * 4 + 3) + (2 + 9 + 9 + 3)\n" +
            "4 * 8 * 7 * (7 * 3 * 7)\n" +
            "(4 + (4 * 4 * 8 * 5) * (4 * 2 + 8 * 7)) * ((5 * 3 * 7 + 2 + 9) + 7) * 4 + 6 + 5 * 9\n" +
            "5 * 7 + 9 + (2 * 9 + 6 + 9 + (6 * 6 + 5 * 4 + 3) + (2 + 7 + 7)) + 9 + (8 + 3 * 3 + 7 * 7 + 6)\n" +
            "9 * 4 * (7 * 8 + 5 * 3) * (2 + 7 * 8 + 4 + 8) * 9\n" +
            "(7 * (2 * 8 + 3 * 3 + 2) * 5) + ((4 * 4 * 3 * 2) * (4 + 3 * 3 + 5 * 8) + (5 + 6) + 4 * 2) + (3 * 3 * 3) * 2\n" +
            "((4 * 7 + 9 * 6 * 7) * (6 + 2) + 4) * 5 + 6 * 4 + 2\n" +
            "2 * 2 * (4 * (6 * 5 + 5 * 6 * 5) + 5 * 6)\n" +
            "2 * 4 + (3 * (6 + 5) + 5 + 2) + 6 * 3\n" +
            "6 * 2 + 9 * (4 + 6 * 7 + 6 * 7 + 7) * 2 + 5\n" +
            "2 * 2 * 9 * (5 * 5 * 9 * 7 * (7 + 5 * 6 * 7 + 7 * 9) + 2)\n" +
            "3 + 7 + 7 + (9 * 4 + 5 + 2) * 2\n" +
            "((7 * 4) * 9 * 4 + 9 + 4 + (8 * 4 + 6 + 2)) + 2 * 5 + 8 + 6 * 5\n" +
            "6 * 7 + (7 * (3 * 4 * 9 * 5 * 7) * 4) + (7 + 8) * 6 * 7\n" +
            "(7 + 4 + 8 + 6 + 3) + 8 * 7 * 4 * 6 + 5\n" +
            "(4 + 4 + 3) * (6 * (7 * 8)) + 9 + (8 * (6 + 2) * 9 + 3)\n" +
            "6 * (7 * 2 + 4 * (5 * 9 + 3) * 3 * (8 * 2 + 6 + 6 * 9)) + 3\n" +
            "8 * 7 + 8 + 3 + (7 + 7 * 3)\n" +
            "((2 + 9 * 5) + 6 + 8) * 8\n" +
            "8 + 2 * (3 * 6 * (7 * 7 * 8) + (9 * 5) * 3 * 4) * 6 + 4\n" +
            "(4 + 7 * (4 * 9) + 4) + 7 * 5 * (7 * (4 * 5 + 2) * 9 + 6 * 7 * (6 * 8)) * 5 + (5 + (3 * 6 + 3 * 3 * 7))\n" +
            "(3 + (3 * 8 + 2 * 3 + 7)) * 5 * 6 * 8 * 8\n" +
            "7 + 5 * (7 + 4 * 5 * 7) + 3 + 9 * 5\n" +
            "((7 + 8 * 3 * 7 * 9) + 5 * 3 + 9 + (9 * 9)) + 6 + (2 + 7 * (7 * 5 + 4 * 7 * 3) + (5 * 7)) * 2 * 4 + 7\n" +
            "6 + 9 * (5 * 7) + 9 * 7\n" +
            "5 + ((8 + 4 * 9 + 3) * (4 + 5 + 6 * 4) * (7 * 2 * 8 + 6) + (8 + 7 * 7 + 9)) * (2 + 8 + 4 + 7) + 5 + 4 + (6 * (6 + 4 * 4))\n" +
            "5 * (9 * (4 + 3 + 4 * 2 + 5 + 5) + (2 * 9 + 3) * 9 + 8) + 6\n" +
            "8 * 6 * 9 + 9 + (3 + 7 + (7 * 7) + (5 + 8 + 5 + 5 * 5)) + 3\n" +
            "4 + 7 * (4 + 9 + 6 + 7 * 9) + (3 * (2 * 8 * 8 + 2 * 7 * 6) * 4 * 6) * 3\n" +
            "2 + 8 + 9 + 5 + 6 * (8 + 3 + (7 + 8 * 2) + 2)\n" +
            "7 + 6 * (6 + 3 * 6 + 2 + 8) * 9 + 9\n" +
            "3 * 6\n" +
            "(9 * 7 * (4 + 6) * 5 + 8) + 4 * 5 + 5 * (2 + 9) + 3\n" +
            "7 * 3 + 3 * 6 * 6 + ((8 + 6 * 4 + 5 * 4 * 7) + (5 * 7) * 6 * (4 + 2 + 8 + 5) + 6 * 3)\n" +
            "7 * 8 + (4 * 3 * 2 * 9) * 6 * (6 * (9 + 7)) + 8\n" +
            "5 + 5 + 6 + 8 + (2 * 5 + 4 * 6 * 7) + (6 + 9 + 8 + 9 + 7 + 7)\n" +
            "2 + (7 * (6 + 9 + 2 * 4)) * 7 * 6\n" +
            "3 + 7 * 3 * (3 + (5 * 6) + 6)\n" +
            "5 * (6 + 2) + 6 * 3 * 7 * 5\n" +
            "2 + ((5 + 6 + 9) + 2 + 6 + 4 + 7) + 2 * 5 + 4 + 6\n" +
            "(6 * 7 * 4 + 2) * 5 * 8 * 3 + 9\n" +
            "4 * (8 * 6 + 2 * (7 * 2 * 9 * 9)) * 8 * 6 + 3\n" +
            "7 * (4 * 9) * 7 * 9 + (4 * 9 * (5 * 7)) * 8\n" +
            "(6 + 6) * 4 + 6\n" +
            "9 * (4 * 6 + (2 * 7) * (4 * 5) + 7) * 7\n" +
            "(8 + (6 + 9 * 8 * 2 * 2)) * 6 + 7 * 9\n" +
            "6 + 7 + 4 * 6 * 2 + (5 + 4 * 3 + (4 * 4 * 8 + 2 * 3 + 9) + (3 * 4 * 9 + 3 * 4) * 2)\n" +
            "(8 + 5 + 7) + 6\n" +
            "8 * (5 * 4 * 5) + 7 + (9 + (9 * 3 + 2 + 2 + 5 + 7) + 2 + 7) * (6 + (5 * 5 + 6 + 6 * 2) + 2) * 9\n" +
            "5 * 2 + 9 + (3 + (3 + 3)) + (4 * 3) * (3 + 3 * (5 + 3 * 5 + 5 * 3))\n" +
            "2 * 8 + 4 * (2 + 6 + (6 * 8 * 8) * 7) + 3\n" +
            "(7 + 8 * 4 + 6) * (9 * 5 + (9 + 6 * 2 + 2) + 6) * 7 + 4\n" +
            "(8 * (3 + 3 * 8)) * (4 * (7 * 6 * 2 + 9 + 8) + (8 * 5 * 5 + 8) * 5) + 8 + 7\n" +
            "(4 + 4) * 7 + 7 + 9 * 2 + 4\n" +
            "6 * 5 * 3 * 4 + ((6 + 7) * 6 + 2) * 2\n" +
            "3 * ((7 + 4 + 6 * 9 + 6 * 8) * 5 * 4)\n" +
            "2 * (9 * 3 * (2 * 8 * 7 + 3 + 8) + 5 + 5) + 8\n" +
            "4 + 8 * 5 * 4 * 3 + (2 * 3 + 8 + 7 * 6)\n" +
            "2 + 3 * ((3 + 4 * 6 + 6 + 8) * 2) * ((3 * 5 * 5) + 7 * (5 * 6 * 3 + 6) * 2 + (4 + 5 * 7) + 2) + 9 * 6\n" +
            "3 * (9 * (9 + 9 * 6 * 8) * (3 + 7 * 5 * 7)) * 7 * 4 + 2 + 9\n" +
            "4 + 6 * 5 + ((3 + 7 + 6 * 6 + 5 + 6) + 4 + 2 * 6 + 4 * 3) * 4 + 2\n" +
            "2 * 9 + 2\n" +
            "4 + 7 * (4 + 3 + (4 + 7) * (4 * 2))\n" +
            "(8 + (7 * 4 * 8 * 2 * 4 * 6) + 6 * 5 + 9 * 3) + 2\n" +
            "4 + 2 * (6 * 6 * (8 + 7 + 2 * 2 + 4 * 6) + 3 * 7)\n" +
            "7 * 9 * 9 * 5\n" +
            "(8 * 2 * (6 * 5 + 6 * 9 * 5 * 3) + 7) + 7 * 2 + 5\n" +
            "6 + (4 * 6 * 5 * 9) + 8 + ((3 * 7 + 5 * 2 * 2 + 5) * (6 * 5 * 9 * 5) * 8)\n" +
            "(3 + (3 * 2) + 8 + 7) * 4\n" +
            "(7 * 3 * 4 * 6 + 7 * 3) * 6 * 4 * 7\n" +
            "3 * (3 + 4 * 4 + 9 * 7 * 8) * 9 * (4 + 3 * 8 + (7 * 7 * 4 * 4 * 2))\n" +
            "9 * 6 + 4 + 6\n" +
            "4 * 7 * ((8 * 3) + 3 * 7) * 7\n" +
            "5 + (4 * 5 * 4 + 8) * 8 + 5 * 2 + 7\n" +
            "3 + ((5 + 7 + 7 * 2) * 4 * 2 * 5 + (3 * 9 * 5 + 7) + (7 + 3)) + ((9 + 4 + 6) * 9 + 3 + 3 + 9 + (2 * 9 + 8))\n" +
            "3 * 6 * 4 * (4 * 7 + 6 + 4) + (4 * 5 + (7 + 6 + 3 + 8 * 5 + 2))\n" +
            "6 + (4 + 5 * 7) * (8 + 2) + 2 + 4 * 8\n" +
            "(6 * (4 + 2) * 2 * 8 + 9) * 5 * 5 * 5 * 2 + 2\n" +
            "3 + 2 + 6 * 8 + 2 * ((3 + 3) + 4)\n" +
            "(4 * 7 + 2 * 9 * (8 + 9 + 2) + (7 * 5 + 4 + 6)) * 9\n" +
            "9 + 4 + (3 + 5 + (6 * 9) + 6) + 8 + 3\n" +
            "3 * (7 + 3 + 9) * (7 * 4 * 4 + 6 + 5) * 2 + 2 * (6 + 9)\n" +
            "3 * ((3 * 9 * 4 + 9) + 9 * (7 + 7 * 5 + 8 + 8 * 7) + (2 * 4 + 7 + 5 + 6) * (2 * 4) * 8) * 5\n" +
            "7 + 3 * (7 + 3 + 8 * 7 * 3 * 5)\n" +
            "8 + ((6 + 2 + 8 * 4) * 8 * 5) + 6 + 7\n" +
            "2 + 8 + 3 * 9 + 8 * 3\n" +
            "(3 + 2 + 5 * 8 + (4 * 7 + 2 * 4) + 3) + 2 * (5 * 7 + 7 * 6) + 2 + 9\n" +
            "2 + 7 + (3 + 6) * 5 * (2 + 5 + 6 * 9)\n" +
            "4 * 4 + 5\n" +
            "(9 + 3) * 3 + 9 * 3\n" +
            "(9 + 8 + 2) * (9 * (4 + 3 + 9 + 3))\n" +
            "7 * 7 + 8 * 9 * 2\n" +
            "9 + 3 * 7 + 8 * 9\n" +
            "(8 + 9) + 2\n" +
            "3 * ((6 * 6 * 9) + 5 + 2 * 8 * 6 + (5 * 2 * 5 * 6 * 4)) + 5\n" +
            "5 * ((8 * 5) * 8 + 4 * (9 + 6 * 6 * 4 + 9)) + (4 * 6 * 5 + 5 * 3) + 3 * 2 + 3\n" +
            "6 * (8 * 9) + ((7 * 4 * 7 + 6 * 8 + 3) * (2 + 9 + 7) + 5 + 6) * 5 + 9 * 7\n" +
            "5 + 9 * 3 * 3 * (4 * 4)\n" +
            "9 * ((8 + 5 + 2) + (4 + 4) + 8) + ((8 + 6 * 9 * 2 + 2 + 6) * 9 * 8 * 7 * 9) + 9 + 3 * 7\n" +
            "8 * 2 + 3 * 4 + ((4 + 4 * 4 + 6 * 8 * 5) + (8 * 2 + 6 + 4))\n" +
            "7 + 5 + 7 + (3 * (9 * 7 * 8) * 6 * 3 + (5 + 8 * 8 + 2)) * (9 * 7 * (4 * 6 + 4 + 7 + 7 * 7) * (5 * 3 + 8) + 7) * 6\n" +
            "(2 + (6 * 2 + 5 * 8 * 2) * 7 + (2 * 8)) * 9 * (2 * 5)\n" +
            "3 * (5 * 4 * 9 * 7) + 2 + 2 * 9 * (6 + 8 * 6 * 5 + 4 * 2)\n" +
            "(2 * (6 + 9 * 4) * 8 * 8 + 5 + (7 * 9)) + 4 * 9 * 9\n" +
            "3 + (3 * 3 + 2)\n" +
            "7 + 9 * 2 + (5 * 3 + 8 + (2 + 5 + 9 * 7 * 5))\n" +
            "2 * (8 * 4 * 7 + 2 * 6 * 8)\n" +
            "3 * 9 * (4 * (3 * 9 + 3 * 7 + 9 + 8)) * 8 * (2 * 6)\n" +
            "6 * 7\n" +
            "9 * 5 + (7 * 4 * 2 + (7 * 9 * 9 + 9 * 8) * 8 * 5) * 8\n" +
            "((2 + 2 * 8) + 8 * (9 * 9 + 7 * 7 + 4 + 5) + 3) + 4\n" +
            "7 + 7 + 5 * (4 + 3 * 9) + 7 + 8\n" +
            "4 * 4 + (4 * 5 + 7 * 9 * 3) * 5\n" +
            "(9 * 4 * 7 * (7 + 7 + 6) * 3 + (9 + 4 + 5 * 8 * 4)) + 2 * 5 + ((6 + 6 + 9 * 3) * 8 * 2)\n" +
            "8 + (8 + 3 * (3 + 4) + 8) + 4\n" +
            "((3 * 8 * 3 + 8 * 2) * 9 + 3 * 5) * 4 * (5 * 4 + 3 * 3 + 4) + 2 + 9\n" +
            "5 * 6 + 4 * 6\n" +
            "(4 * 7) + 2 * (9 + (9 * 7 + 2 + 6) + 6) + 4\n" +
            "8 * (9 + 7 * 9) + 4 + 2 + 6 * 7\n" +
            "(8 + 9 * (3 + 7 + 2 * 6 * 7 + 6) + (3 * 3 + 4 + 8 * 4) * 3 * 3) * 5 * 7 + 7 + (8 + 7)\n" +
            "6 * (8 + 8 * 5 * (5 * 5 + 3 * 9 + 8) + 6) + (7 + 8 * 7)\n" +
            "(2 * (5 + 6 + 5) * 9 + (6 * 5 + 4) * 3 + 8) * 4 * (6 + 8 * 4 + 5) + 6 + 9 * 9\n" +
            "(9 + 5 * 5) * 2 * 5 + 8\n" +
            "3 + ((6 * 9 * 7 + 4 * 2 * 6) + 5 * (8 * 3 * 3 + 6))\n" +
            "6 * 6 + (5 * 6)\n" +
            "(6 * (8 * 9 + 3) * (2 + 7) + 5) * 7 * 8 * 8 * 2 * 9\n" +
            "2 + 5 + (5 * 4 * 6) + (5 + 2)\n" +
            "8 + 9 + 8 * 9 + (8 * 8 * 3 + 7)\n" +
            "7 * 7 + 9 * ((9 + 9) * (4 + 5 * 7 * 7 + 5) + 4) * 3 + (5 * (2 * 5 * 8 + 2) * 2 + 6 + 2)\n" +
            "8 * ((7 * 8) * 2 + 3 + 3 * 6)\n" +
            "4 + (2 + 9) + 9 * (9 * 7 + 3 + 6 * 6 * 4) * 8\n" +
            "5 * 5 * 6 * 3 * ((7 + 8 + 6 + 7) + 2 * 8 + 5 + 6 * 9)\n" +
            "(9 * 4) + 2 * 2 * (2 * 9 * 8 + 5)\n" +
            "8 * ((5 * 5 + 9 + 6 * 4 + 3) + 7 + 9 * 4 + (8 + 4 + 8 + 6 + 9) + 2) + 2 + 8\n" +
            "9 * 9 * (3 * 3 * 5) * 7\n" +
            "6 + (4 * 3) * 2 + 3 * ((8 + 6 * 9) * (7 * 7))\n" +
            "6 * 8 + 2 * 6 + 8 + 2\n" +
            "((4 + 4 * 2 * 5 * 9 * 6) + 4) * ((2 + 7) + 3 + 4) + 4 + (8 * (5 * 8 + 2 + 8)) * 5 + 3\n" +
            "((9 + 4 + 9) * 2 + 3 * 5 + 5 * 6) + 8\n" +
            "8 * (4 * (5 * 2 + 4 * 4 * 5) * 9 * 4 * 9) * (8 + (4 * 4 + 7 * 9 + 8) + 8 + 4) * (9 + 9) + 3\n" +
            "(5 + (6 * 6 * 7 * 4 + 7) * 4 * 3) * 3\n" +
            "(6 * 5) + 5 + 8 * (7 + 2 + 6 + 4 * 8) + 2\n" +
            "4 * 8 * (7 + 7 * (7 * 6) * 2) * 4 * 3 * ((9 * 2 * 2 * 6 * 2) + 5 + 9 + 8)\n" +
            "(9 + 9 * 4 * 9 * 9 + 2) * 3 + 2\n" +
            "3 + (3 * 7 + 9 * 2) + (5 + (5 + 8) + 6)\n" +
            "8 + 3 * (7 + (8 * 9) * 4 + 8 + 6)\n" +
            "5 + 5 + (8 + 6) + (5 + 9 + 8) + 7 + (9 * (6 * 4 + 7 + 9 + 3) + 4)\n" +
            "7 * 5 + 3\n" +
            "4 + 6 * (6 * 3 + (5 * 2 + 6 + 2) * 2)\n" +
            "9 + (3 + 2 + 4 + 5 * 7)\n" +
            "(7 + 5 * 6) + (3 + 6) * (5 * 7 * 8 + 5 * 7 + 4) + 3\n" +
            "6 + 9 + (5 + 7 * 2)\n" +
            "6 + (9 + 6) + 4 + (6 + 3 + (6 * 5 + 2 * 9 + 4) * 3 + 3 * 7) * (6 + (6 * 2 * 7))\n" +
            "4 + (2 * 4 + 4 + (7 + 7 + 4 * 7 + 9 * 5)) + (8 * 3) + 9\n" +
            "(9 + (8 * 5 * 5 * 2 + 4) + 6 * 2 * 9) * 9 + 4 * 6 + 7 + 2\n" +
            "8 + 3 + 9 * (8 * 4 * (8 + 6) + 7 * 2 + 8)\n" +
            "8 * 8 + 4 + (3 * (8 + 7) + 5 + 3 * (2 * 4 * 8 + 2) * (9 + 5 + 3 * 9 + 7 + 9)) + 9\n" +
            "7 * (3 * 4) + 2 * ((5 + 3 + 6 * 2 + 9 * 2) + 2 * 4 + 6 + 7 + 3) + 3 + 2\n" +
            "(8 * 8 * 4 + 3 * (2 + 8 * 3 * 5 * 7) + 4) * 9 + 8\n" +
            "2 * (7 * 9 * (4 + 4 + 7 * 7 + 6 * 7)) + (7 + 9 + 8 + 4 * 2 * 9) + 7 * 8\n" +
            "(4 + 5 * (3 + 6 * 8 + 7 * 7) * 8 + 2) * 5\n" +
            "9 * 5 * 2 + (7 + (9 * 8 * 3 + 9 + 4) * 9)\n" +
            "6 + 2 + 2 + 6 * (2 + 5 + 9 + 5) + 3\n" +
            "4 * 2 * (4 + (6 * 4) + 4 + 6 + 5) + 2 + 3 + 4\n" +
            "8 * (9 + 7) + 2 + 4\n" +
            "((7 * 9 + 6 * 5) * 5 + 9) + 3 * 6 + (2 + 5) + (7 + (7 + 4 * 3 + 7) + 2 + (5 * 4) + 8)\n" +
            "(8 + 2 + 3) * (8 + 9 + (3 + 6) + 7) + 8 + 6 + (9 * 7 * 6 * (5 * 6 + 6 * 2 * 2 + 9) + 2 + 5) + 6\n" +
            "6 + (4 * (4 + 6 * 3 * 5 + 7) * 7)\n" +
            "7 + (3 + 3 + 9 * (9 * 9) * 8) * 6 * 3\n" +
            "4 * 2 + (4 * 2 * (3 + 9 * 7 + 3 + 9) + 6 + 8) * 8 + 5 + 7\n" +
            "4 + (9 + 2 * 7 + 7 + 2) * 4 + 6 + 3 * 5\n" +
            "3 * (9 + 7 * 7 * 6)\n" +
            "6 + (7 * 3 + 4) * (7 + 7 * 5 + (8 * 6))\n" +
            "8 * (2 * 7) * 8 + 2 * 8\n" +
            "5 + (8 * 6)\n" +
            "2 * 6 * (9 * 7 + 8) * 7 + (4 * 2 + (9 * 4 + 2 + 2 + 5) * 6)\n" +
            "(3 * 6 * 9 + 9 + 8 + 2) + 7\n" +
            "((3 + 8) + 6) + 6\n" +
            "((2 + 4 * 4) * 6) + (5 + (9 * 2 + 4 * 5 + 8 + 4) * (4 + 4 + 8 * 8)) * 6\n" +
            "3 * 3 * (7 * 2 + 9 * 2 + 8 + (4 + 4))\n" +
            "(5 + 9 + 5 + (3 + 5 * 5)) * 5 + (9 * (6 + 8 + 6) * 6 * 7)\n" +
            "2 + (4 * 7 * 3) + 9 * 5\n" +
            "8 + 9 + 3 * 6 + 6 + (4 + 8 + (7 * 3 * 7 * 6 * 7 * 7) + 9 * 2)\n" +
            "2 + 5 + (4 + (6 * 6 * 9) + 4 * 3) * 2\n" +
            "(5 + 6 + 6 * 8 * 9) + 9\n" +
            "5 * 7 + 4 * 9 + 4\n" +
            "(3 + 4 + (8 + 9 + 4 * 3) + (4 * 3) + (9 + 6 * 4 * 6 * 6 + 7) + 2) + (4 + 4 * 9 * 4 * 3) + 2 * 9\n" +
            "7 * 3 * 8\n" +
            "(3 + (3 * 8 * 2 + 5) + (3 + 3 * 6 + 7 * 8) + 9 + 6) * 5 * 6 * 2\n" +
            "8 + 9 + (5 * 3) * (6 + 6 + 7 * 2) * 8\n" +
            "5 + 2 + (8 * 4 + 3 * (6 + 6 * 5 * 3 * 6) + 6) * ((8 + 3 + 6 * 6) * (3 * 2 * 3 * 6)) * 5\n" +
            "(8 + 7) * 3 + (7 * 8 + 4 * 5 + 4) + (9 + 9 + 3 + (9 * 8 + 9) * 6 * 9)\n" +
            "(4 * (3 * 6) + 8) * (6 * 2)\n" +
            "(5 + 5) * 7 + 7 + (4 + 9 * 4 + 2) * 9\n" +
            "6 * 2 * (5 + 2 * (4 * 8 + 6 + 5 + 3) + 6 + 2 + (5 + 9 + 9 * 7 + 6)) * 4 * (7 + 6 * 9 * 8 + 2 + 4) * 3\n" +
            "(6 * (5 + 4 + 8 * 6 * 7 + 5) + 5 + 7 + 9 * 2) + 2 + (3 * (7 * 2 + 8) * 5 + 8 * 5 * 6) + (2 + (4 + 2 * 4 * 3))\n" +
            "6 + 3 + (4 * 2 * 3 * 6 * 3 + 9) * 6 + 8\n" +
            "5 * 5 * (4 * 6 * 8 + (2 * 3 * 7 + 4 * 6)) * 7 + 4 * 4\n" +
            "4 + 6 + 3 * 2 * (4 + 4 * 6 + 5 * 3) + 5\n" +
            "3 + 4 + 4 * 3 + 6 + (3 * 4 * 3)\n" +
            "8 + 7 + (6 + 3 * 3 + 2 * (8 + 7 * 2 + 6 + 8) + 5) + 2 + (8 * 7 + 2) * 2\n" +
            "7 * 7 + 6 + 9 * 7 * 6\n" +
            "6 + 7 + ((5 + 7 * 5 * 9) * 5 + 3) + 6\n" +
            "6 + (6 + 3 + 6) * 7 * (6 + 8 * 7 + 9 + 4) * ((4 + 9 + 5 + 9) + 2 + 9 * 7 * 6 + 7) + 7\n" +
            "(3 + 9 * 7 * 3) * 6 + 6 * 2\n" +
            "5 * 7 + (6 + 7 * 5 * 5 * (9 + 9 * 2 + 8 * 5 * 6)) * 8 * 8 + (9 * (8 * 3 * 7 * 6 + 2 + 2) * 9 + 6 * 4)\n" +
            "3 + ((9 * 5 * 6) + 2 + (9 + 8 * 4 + 9 + 6) + 9 * 8 + 5) + 4 + (3 + 8 * (7 * 5 * 7 * 2 + 5) * (7 + 5 * 5 + 6 * 5 + 5) * 9)\n" +
            "(9 + 2) * 8 * 3 + (3 + 8)\n" +
            "7 + (6 + 2 + 8 * 8 * 3) + 6 + 5 + 6\n" +
            "(4 + 9 + 4 * 4 + 4) * 9 + ((8 + 9) * 6 * (4 * 5) + (8 + 8 + 7 + 2 * 8) * (5 + 7 + 8)) + 9 + (6 + 6 * 9 + 8 + 5 + 5)\n" +
            "(9 + 9 * 7 + (8 * 4 + 5)) * (2 + 3 * 5 + (4 + 4)) * (9 * (5 * 6 * 2 + 7 * 3 + 5) * 7 + (3 + 9 + 3) * (4 + 2 * 9 * 6 + 5)) + (3 * 6) + 5 + (5 * 4 + 6 + 8)\n" +
            "((2 + 5 + 7 * 9) + 7 * 7 + 3 * 6) + (9 + 6 + (7 * 9 + 8 * 7) + 6 * 4 + 7)\n" +
            "9 + (4 * 6 * 2 * (5 + 9 + 8 + 3 + 2 * 6))\n" +
            "6 * 5 * (5 * 9 + 5 + 3) + 9\n" +
            "(4 + 6 + 3 + 4) * (9 * 5) * 9 * 4 * 3 * (3 * 8 * 6 + 4 + 8)\n" +
            "((3 + 2 + 2 * 9 + 3 + 8) * 3 + 5 * 3 + 7 * 5) + 5 * 5 + ((9 * 9) + 5 + 2 * 7) + 5\n" +
            "9 * 7 * ((6 + 3 * 8) + 8) * 5 * 2 * 2\n" +
            "(9 + 2 * 5 + (9 + 6 + 3 + 2 * 7 + 9) + (3 * 5 + 7) + 5) + (9 + 6 * 9 * 3) + (4 + 5 + 8 * 2) * 3 + (6 * 4 + (8 * 2 + 5 * 2 + 7) * 2 + 7) * 3\n" +
            "5 * 9 + 6 * (3 + 3)\n" +
            "4 * 8 * 9 * 5 * 3\n" +
            "9 * 8 * 6 * 3 * ((2 * 4 * 6 + 8 + 7) + (6 * 8) * 3 * 5) * 5\n" +
            "2 + 2 * (7 * 4 * 2 * 3)\n" +
            "8 * (6 + 8 * 7) * 3 + 2 + 5 * ((6 * 7 * 7 * 7) * (5 + 6 + 5) * 6)\n" +
            "5 + (6 * 6 * 7 * 3) + 5 + 7\n" +
            "(5 + (6 * 8 * 5 + 6)) + 7 * 4 + 2 * 2 + 4\n" +
            "2 + (4 * (4 + 5 * 9 * 9) * 3)\n" +
            "9 + (6 + 2 * (9 + 7 * 4) + 6) * 7\n" +
            "6 + 9 * ((4 * 6 * 9 + 5) + 2 + (7 * 7 * 7 * 6 + 6) + (2 * 5 * 6 + 8 + 7 * 5) + 4) * 2\n" +
            "(9 + (7 + 5 * 4 + 3)) + 8 + 7 + 9 * 5\n" +
            "((6 * 2 * 4) * (4 + 7 * 2 * 6 + 7 + 3)) + 9 + 3 * 5 * 7 + 4\n" +
            "((3 * 8 + 8 + 8 * 9) + 4) * 7 * 8 * (9 * 6 * 3 + (8 + 7 * 9 * 9 * 7 * 6) + (6 * 2 * 4 * 9 + 9 * 9)) * 5 + 9\n" +
            "4 + 8 * 6 + (7 * 2 + (6 + 3 + 5 * 2 + 2) * 2 * 5) * 7 * 2\n" +
            "(4 + (8 + 5 + 3 + 7 + 7 * 5) * 8) + (4 + 6 + 7 * (3 * 8 * 6) * (4 * 4))\n" +
            "(6 + 2 + 2 * (7 * 3 + 9 * 7 + 2)) + 3 + 5 + (4 + 9 * 8 * 7) * 3 * (7 * 4 * 2 + 7)\n" +
            "8 * 8\n" +
            "(8 * 5 + (3 + 2) * 9 + 9 + 3) * 5 + 4\n" +
            "(4 * 6 + 3) * 5 + (9 * 5 * 7 + 5 * (7 + 6 * 4 + 6) + 4)\n" +
            "(9 + 3 + (8 * 2) * 7 + 7) * 4 * 6 + 7\n" +
            "(6 * 3 + (2 * 6 + 2) + (7 + 7 + 3 * 7 * 6) + 6 + 2) + (6 * 3 * 5)\n" +
            "6 * 5 * (2 * 5 + 9 * (4 + 2 * 6 * 4 + 5 * 2) + 5) + 6 + (4 + (3 + 2 + 2 * 5 * 2) + 8 + 5 * 2 + 5)\n" +
            "((5 + 9 + 2 + 7 + 4 * 9) * 9 * 3 + 8 + 2 * 8) + ((7 * 5 + 7 + 3 * 7) * 8 + 2) + 5 + (5 + 8 + 4 + 6) * (5 + 8 + 2)\n" +
            "5 + 3 + (9 + 4 + 6) * 8 + 8\n" +
            "2 + (2 * 4 + 7 + 9) * (7 * 4 * (2 * 5 + 2) + 3) + 8 * 6\n" +
            "7 + (2 + (5 * 7 + 8 * 4 * 5) * 9 + 8 * (3 * 3)) * (6 + 6 * 2 + 4) * 9\n" +
            "((9 * 5 * 7 + 4 + 8 + 9) + 9 + 4 + (8 + 4 * 8 + 6 * 7 * 3)) * 2\n" +
            "5 + (5 + 6 + 7 + 5 * 8 * 6) + 5\n" +
            "(4 * 5 + 8 + 5) * (8 + 2 + 8 + 4 + 4) + 6\n" +
            "5 + 4 * 8 + 7 + 4 * 4\n" +
            "3 * 7 + 3 + 9 * 7 * (6 * 2 * 8 + (2 + 2 + 4))\n" +
            "8 + 9 + 4 + (8 + 7 + 5 + (6 + 8 + 4 + 4 * 3 * 6) * (3 + 3 * 4 * 5) * 9)\n" +
            "4 + (4 + 9 * 3 * (4 + 6 * 5 * 8 * 7)) + ((8 + 6 * 2) + 8 + 5 + 8) * ((2 + 9 + 8 * 5 + 3) + 5 + 5) * 3\n" +
            "3 * (7 + 5 + 3 + 7 * 5) + (7 + 6 + 2 * 8 + (3 * 7 + 2) + 6)\n" +
            "(2 + 6 + 9) * 9 * 3\n" +
            "8 + (2 + 2) + 2\n" +
            "5 + (7 * 2 * 6 + 3) + 4 + 7 * 7 + (9 * 5 * 8 * (3 * 9 * 2 * 4 + 6 + 2) + 3 * 4)\n" +
            "9 * 6 * 8 + (3 + 9) * 6 + 4\n" +
            "2 * 3 * 5 + 6 + 6 * (4 * 9 + 4 * 6)\n" +
            "8 * 9 * 9 * ((4 + 7 + 5 + 7 + 2 + 7) * 2 + 2 + (3 + 8 + 6 * 5) * 6 * 6) + 7 + 4\n" +
            "(8 * 5 * 7) + (5 + 6) * 7 * (4 + 7 * (9 * 4 + 5 * 8 * 9) + 6) + 3 * 7\n" +
            "3 + 2 + 4 + 7 + 3\n" +
            "(8 + 7 + 2 * (4 * 7 + 8 + 2 * 6)) * 2 + ((6 * 5 * 5 + 8 * 7 + 3) * (4 * 5) + 3 + 6 + 6 * 8) + 7 * 3 * 5\n" +
            "2 * (5 * (3 * 4)) + 6 * 8 + 8\n" +
            "(7 + 9 + 5) + 8 * 3 + (6 + 9 * 3 + 4 + 8) * 8 * 3\n" +
            "7 * 9 * (3 * (7 * 4 + 9 * 8 + 9) * 7) + (7 * 7 + 5)\n" +
            "5 * 2 + 8 + 7\n" +
            "(7 + 3 * 8) + (3 + 6)\n" +
            "9 + 5 * 6 * 9\n" +
            "((5 + 5 + 7 + 6 + 8) + 5 * 7 + 8 + 5 * 8) + 6 + 6 * (9 * 4 + 8 + 7) + 8 * 2\n" +
            "((4 * 9 * 3 * 5 + 5) + (4 + 4 + 2) * 6 + 5 * 9 * 8) + 8 * 2 + 8 * 6 * 9\n" +
            "8 * ((3 + 2 + 7) * 9) + 4 * 2 + 3 * 2\n" +
            "3 + 9 + 6 + 2 + ((9 + 5 + 3 * 3) + 9 + 8 * 2 * 8 * (3 * 6 + 9 + 3))\n" +
            "4 * (7 + 8 * 4) * 7 + 7 + 8\n" +
            "2 * 2 + (3 * 8 + (7 * 5) + 8 * (9 + 5)) + 3 + 9 * (5 * 9 + 9 + 4 + 8)\n" +
            "3 * 8 + ((2 + 6 + 2 + 9 * 3 + 3) * (3 * 9 * 4 + 6 + 4) + (4 + 9) + 2 * 8 + (4 + 6 + 2 * 7 * 7))\n" +
            "((8 * 9 + 6 + 2 + 5 * 7) + 3 * 6 + (8 + 8) + (9 * 6 + 6) * 7) + ((6 * 9 + 8 + 8 + 7 * 9) + 5 + 4 * 4 + 2 + 7) * 8\n" +
            "5 * 4 * 7 + ((3 * 8 + 2) * (3 + 4 * 3) + 5) * 5 * 5\n" +
            "4 + 7 * 5 + 6 + 4 * (2 * 9)\n" +
            "(2 * 3 + 9 * 6 * 9 + 2) + 3 * ((5 * 9) * 5 * 8 + 9) + 9 * 8\n" +
            "((9 * 7 * 7 * 2) + 8 + 3 + (6 + 2 * 4 * 3)) + 6 + 6 + 9 + 8\n" +
            "8 + 3 + (5 * 5 * 3 * 8 + 4 + 4) * (8 + 7 * 8 * 6 + (2 * 4 * 6 + 5 * 6 * 4) * 9) * (3 + 4)\n" +
            "9 + 3 * ((2 + 8 * 5 + 7 + 8) + (5 + 3 + 5) + 6 * 6 * 4) * (7 + 5 * (5 * 9 + 3 + 6) * 2) + 9\n" +
            "4 * (8 + (9 * 2 + 2 + 8) * 4 + 7 + 8 * 4)\n" +
            "7 + 4 * (7 * (7 + 6) + (2 + 9) + (2 + 2 + 9 * 9) * 2) + 8 * 6\n" +
            "(5 + (3 * 4 * 2 * 7 + 4)) + 5 * (7 + 8 * 5 + 5) * 4 + 9 * 4\n" +
            "((4 * 7 * 3 * 4 * 2 * 2) * (6 * 3 + 4) + 4 + 6) * 4\n" +
            "9 * (3 * (9 + 5)) * 5 + (4 * (6 * 4 + 4))\n" +
            "(9 + 4 + 5 + (5 * 2 + 4) * 3) * 2 * (9 + 7 * 6 + 7) + 7 + 6\n" +
            "9 * ((8 + 9 * 7) * 6 * 6 * 4) + 7\n" +
            "6 + 8 + ((3 + 4 + 2 + 3 * 8 * 5) + 8 + 7) + 6 * 6 * 8\n" +
            "2 + 9 + 7 * 7 + ((6 + 8) * (6 * 5 * 5 + 8 + 8 + 5) * 8 + (2 + 7 + 8 + 2 + 9) + (8 + 6 + 7 + 5 + 9 + 8))\n" +
            "7 + (2 + 4 * 5 + (9 * 2 * 8 + 4)) + 2\n" +
            "3 + 5 * 3 + (8 + 6 * 7 + 7 + 2) + (2 + 2) * 9\n" +
            "(5 + 7 * 4 * 5) * 8 + 2 * 5 * 9 + 4\n" +
            "((7 + 6 + 8 * 9 * 3 + 8) * 8 + (2 + 4 + 7) + 3 * 2) * 5\n" +
            "9 * (7 + 9 * (7 * 7 * 5) + (2 * 2 * 5) + 4) + 4 * 9 + 6 * 6\n" +
            "((7 * 7 * 2 + 4 + 5) + (3 + 3 * 8) * 9 + 7 * (5 + 6 + 3)) * 8\n" +
            "9 * 8 * 7 * 9 + (3 + (4 + 2) * 8)\n" +
            "((9 + 7) * (9 + 5 + 7) * (5 * 9) * 5) * 6 * 8 * 6 + 7\n" +
            "3 * 6 * 6 + ((7 * 3 + 8 * 7 * 6 + 2) * 5 * 2 + (6 + 4) * 9)\n" +
            "3 * 5 + (8 * 8 + 7 + 9) + ((5 + 5 + 7) * 3) * 7\n" +
            "7 + (6 + 5) * 2 + ((2 * 9 * 6 * 4) * (4 + 6 * 3 * 4) + 8 + 2 * 2 * 5) * 6 + 6\n" +
            "(9 * 2 + 5 * 3) * 7 + (3 * 5 + 6) + 2 + 7\n" +
            "2 * 3 + 7 * 5 + 6 * 5\n" +
            "9 + ((4 + 4 * 4 * 6) + 5 * 8) * (2 + 9)\n" +
            "(9 + 6 * 3 * 8) * 7 * 4\n" +
            "7 + 3 + (5 + (7 + 2 * 8 + 3)) + (4 * 5 + (7 + 2) + 2)\n" +
            "(4 + 2 * 6) * 2 * (7 + 5 * 8) + 3\n" +
            "3 * 7 * (2 + 2 + 4 + (2 + 2 + 6 * 6 * 3) + 8 * 6)\n" +
            "4 * 2 + 4 * (3 + 7 * 8 + (6 + 4 + 5 + 4 + 7 + 9)) + 3\n" +
            "5 + ((8 + 4 * 5 * 6) + 4 * (8 * 6 * 7 + 5 * 3) + 5 * 7)\n" +
            "8 + (2 * (6 + 9 * 7 + 8) * (9 * 2 * 7 * 5 * 8) + 5 + 4) + 9\n" +
            "8 * (9 + 7 * (8 + 8) * 5 * 2) * (5 + 7 * 6 * 6 * 8 * (7 + 6 * 6)) + 3\n" +
            "3 * 9 * (7 * (8 * 9 * 9) + 3 * 3 * 9 + (5 * 9 + 7 + 9 * 4)) + 9\n" +
            "4 + 7\n" +
            "3 + (2 * 2 + (7 * 3) * 2) + 7 + 4 + (2 + 6 * 4 + 9 * 4 * 5)\n" +
            "2 * 8 + ((7 + 3 * 3 + 4) * 8 * 8 + 8 + (2 + 3 * 2 + 2 + 5) * 2) + 7 + ((9 * 5 * 2) * 7 * 8) * (4 * 7 * 8)\n" +
            "2 * 9 * (3 + 5 * 3) * 2 * 9 * 2\n" +
            "(6 * 7 * 4) * 4 + 8 + (4 * 8)\n" +
            "7 + 2 + (9 * 4 + 5 * 6 * 7)\n" +
            "6 * (6 * (9 * 7 + 4 + 8 * 7) * 2 * 8 + 6) * 7\n" +
            "4 * 4 + 2 + 4 * (9 * 2) + 2\n" +
            "2 + 7 + 6 + 3 * ((3 + 5 * 4 * 4) + 6 + 8 * 9)\n" +
            "7 + 4 * (3 + 4 + (3 * 5 + 4 * 2)) + 9 + (5 * 6)\n" +
            "(4 + 7 + 3 + (4 * 8 * 8 * 7 * 7 * 6)) * (2 * 7 * 8 + 4 * 8) + (9 + 6 * (9 * 8 * 5 + 5) + 2) + 8 * 7 * 6\n" +
            "(2 + 3 * 7) + (7 + 6 * 5) + 5 * (6 * (4 * 4 * 4 * 6) * 4 * (6 * 7) + 6) + 9 * 7\n" +
            "6 + 6 + 2 * (6 + 7 + (9 + 9 + 9 * 7 + 7 + 7) + 7 * 5)\n" +
            "((2 * 2 + 2 + 4 + 8 + 8) + 3 + 6 + (2 + 8 + 2 * 5 * 2)) + 7 * 7 * 2 + 6\n" +
            "4 + ((4 * 8 * 9) * 7 + (2 * 2 + 7 + 6 + 8 + 5) * 4 + 5 + 8) * 5 * 2\n" +
            "8 * (5 * 5 * 4 * (9 * 9 + 8 + 6 + 9 + 3) + 8 * 7) * 4\n" +
            "9 + ((9 * 3 * 4 * 2) + 6) + 8 + 4 * 9 * 7\n" +
            "2 * 8 * 2 * ((2 * 8 * 3 * 5) + 5 * 2 * 7 * 2) + 4\n" +
            "(2 + (6 + 6 + 7 + 9 + 9 + 7)) + 7 + 3 + (6 * 3 * 5 * 8) + 9 * 2\n" +
            "2 * 5 * 2 + 5 + 2 + ((9 + 7 + 6) + 7 + 2 + 2 * 2)\n" +
            "5 * 4\n" +
            "(3 * (9 + 5) + 3 + 4 + (7 * 6 + 6 * 6)) * 8 + (6 + 2 * 8 * (6 + 6 * 7 * 3 + 5) + 3 + 5) * 3 * 7\n" +
            "5 * (4 * 2) + (5 * 7 + 4 + 2) * 6 + (2 * (6 * 8 * 3 + 5) + 8) + 8\n" +
            "9 * 2 + (7 * 5) + 2 + (9 + 4)";

}
